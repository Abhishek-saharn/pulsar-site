"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[7157],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},10908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={id:"pulsar-cs-0.11.0",title:"Pulsar DotPulsar",sidebar_label:"Pulsar DotPulsar"},l=void 0,i={unversionedId:"versioned/pulsar-cs-0.11.0",id:"versioned/pulsar-cs-0.11.0",title:"Pulsar DotPulsar",description:"Added",source:"@site/release-notes/versioned/pulsar-cs-0.11.0.md",sourceDirName:"versioned",slug:"/versioned/pulsar-cs-0.11.0",permalink:"/release-notes/versioned/pulsar-cs-0.11.0",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/release-notes/versioned/pulsar-cs-0.11.0.md",tags:[],version:"current",frontMatter:{id:"pulsar-cs-0.11.0",title:"Pulsar DotPulsar",sidebar_label:"Pulsar DotPulsar"}},s={},c=[{value:"Added",id:"added",level:2},{value:"Changed",id:"changed",level:2},{value:"Fixed",id:"fixed",level:2}],u={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Consumer and Reader now share the IReceive interface for receiving a single message: ValueTask\\<Message",">"," Receive(CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"The Consumer and Reader now share the ISeek interface for seeking on message-id and publish time"),(0,r.kt)("li",{parentName:"ul"},"The Consumer and Reader now share the IGetLastMessageId interface for getting the last message-id on a topic"),(0,r.kt)("li",{parentName:"ul"},"The Consumer, Reader, and Producer now share the IState interface adding 'OnStateChangeFrom' and 'OnStateChangeTo'"),(0,r.kt)("li",{parentName:"ul"},"The PulsarClient, Consumer, Reader, and Producer now have the read-only property 'ServiceUrl'"),(0,r.kt)("li",{parentName:"ul"},"The Consumer now have the read-only property 'SubscriptionName'"),(0,r.kt)("li",{parentName:"ul"},"All message compression types are now supported (listed below). Please read this ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/apache/pulsar-dotpulsar/wiki/Compression"},"compression how-to"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"LZ4"),(0,r.kt)("li",{parentName:"ul"},"SNAPPY"),(0,r.kt)("li",{parentName:"ul"},"ZLIB"),(0,r.kt)("li",{parentName:"ul"},"ZSTD")))),(0,r.kt)("h2",{id:"changed"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'MessageId.ToString() now returns a string matching that of other clients: "{LedgerId}:{EntryId}:{Partition}:{BatchIndex}"'),(0,r.kt)("li",{parentName:"ul"},"A lot of methods were made into extension methods and now require a using statement for 'DotPulsar.Extensions'",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Producer.StateChangedTo(ProducerState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Producer.StateChangedFrom(ProducerState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Producer.Send(byte[] data, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Producer.Send(ReadOnlyMemory\\<byte",">"," data, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Producer.Send(MessageMetadata metadata, byte[] data, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Producer.Send(MessageMetadata metadata, ReadOnlyMemory\\<byte",">"," data, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.Acknowledge(Message message, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.AcknowledgeCumulative(Message message, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.StateChangedTo(ConsumerState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.StateChangedFrom(ConsumerState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.Messages(CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.Seek(DateTime publishTime, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Consumer.Seek(DateTimeOffset publishTime, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Reader.StateChangedTo(ReaderState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Reader.StateChangedFrom(ReaderState state, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Reader.Messages(CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Reader.Seek(DateTime publishTime, CancellationToken cancellationToken)"),(0,r.kt)("li",{parentName:"ul"},"Reader.Seek(DateTimeOffset publishTime, CancellationToken cancellationToken)")))),(0,r.kt)("h2",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Before the Consumer and Reader would throw an ArgumentOutOfRangeException if they encountered a compressed message. Now they will throw a CompressionException if the compression type is not supported"),(0,r.kt)("li",{parentName:"ul"},"DotPulsarEventSource (performance counters) was only enabled for .NET Standard 2.1. Now it's enabled for all target frameworks except .NET Standard 2.0")))}d.isMDXComponent=!0}}]);