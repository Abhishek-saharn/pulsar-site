"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[47106],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,k=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},89899:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const l={id:"client-libraries-dotnet",title:"Pulsar C# client",sidebar_label:"C#"},o=void 0,s={unversionedId:"client-libraries-dotnet",id:"version-2.11.x/client-libraries-dotnet",title:"Pulsar C# client",description:"You can use the Pulsar C# client (DotPulsar) to create Pulsar producers, consumers, and readers in C#. For Pulsar features that C# clients support, see Pulsar Feature Matrix.",source:"@site/versioned_docs/version-2.11.x/client-libraries-dotnet.md",sourceDirName:".",slug:"/client-libraries-dotnet",permalink:"/docs/2.11.x/client-libraries-dotnet",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.11.x/client-libraries-dotnet.md",tags:[],version:"2.11.x",frontMatter:{id:"client-libraries-dotnet",title:"Pulsar C# client",sidebar_label:"C#"},sidebar:"docsSidebar",previous:{title:"WebSocket",permalink:"/docs/2.11.x/client-libraries-websocket"},next:{title:"REST",permalink:"/docs/2.11.x/client-libraries-rest"}},i={},c=[{value:"Installation",id:"installation",level:2},{value:"Connection URLs",id:"connection-urls",level:2},{value:"Release notes",id:"release-notes",level:2},{value:"Client",id:"client",level:2},{value:"Create client",id:"create-client",level:3},{value:"Create producer",id:"create-producer",level:3},{value:"Create consumer",id:"create-consumer",level:3},{value:"Create reader",id:"create-reader",level:3},{value:"Configure encryption policies",id:"configure-encryption-policies",level:3},{value:"Configure authentication",id:"configure-authentication",level:3},{value:"Producer",id:"producer",level:2},{value:"Send data",id:"send-data",level:3},{value:"Send messages with customized metadata",id:"send-messages-with-customized-metadata",level:3},{value:"Consumer",id:"consumer",level:2},{value:"Receive messages",id:"receive-messages",level:3},{value:"Acknowledge messages",id:"acknowledge-messages",level:3},{value:"Unsubscribe from topics",id:"unsubscribe-from-topics",level:3},{value:"Reader",id:"reader",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"Monitor producer",id:"monitor-producer",level:3},{value:"Monitor consumer state",id:"monitor-consumer-state",level:3},{value:"Monitor reader state",id:"monitor-reader-state",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can use the Pulsar C# client (DotPulsar) to create Pulsar producers, consumers, and readers in C#. For Pulsar features that C# clients support, see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/1YHYTkIXR8-Ql103u-IMI18TXLlGStK8uJjDsOOA0T20/edit#gid=1784579914"},"Pulsar Feature Matrix"),"."),(0,r.kt)("p",null,"All the methods in the producer, consumer, and reader of a C# client are thread-safe. The official documentation for DotPulsar is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar-dotpulsar/wiki"},"here"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"This section describes how to install the Pulsar C# client library through the dotnet CLI."),(0,r.kt)("p",null,"Alternatively, you can install the Pulsar C# client library through Visual Studio. Note that starting from Visual Studio 2017, the dotnet CLI is automatically installed with any .NET Core related workloads. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/visualstudio/mac/nuget-walkthrough?view=vsmac-2019"},"Microsoft documentation"),"."),(0,r.kt)("p",null,"To install the Pulsar C# client library using the dotnet CLI, follow these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/"},".NET Core SDK"),", which provides the dotnet CLI.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a project."),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a folder for the project.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open a terminal window and switch to the new folder.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the project using the following command."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"dotnet new console\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet run")," to test that the app has been created properly.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the DotPulsar NuGet package."),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use the following command to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"DotPulsar")," package."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"dotnet add package DotPulsar\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After the command completes, open the ",(0,r.kt)("inlineCode",{parentName:"p"},".csproj")," file to see the added reference."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<ItemGroup>\n  <PackageReference Include="DotPulsar" Version="2.0.1" />\n</ItemGroup>\n')))))),(0,r.kt)("h2",{id:"connection-urls"},"Connection URLs"),(0,r.kt)("p",null,"To connect to Pulsar using client libraries, you need to specify a ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.11.x/developing-binary-protocol"},"Pulsar protocol")," URL."),(0,r.kt)("p",null,"You can assign Pulsar protocol URLs to specific clusters and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pulsar")," scheme. The following is an example of ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," with the default port ",(0,r.kt)("inlineCode",{parentName:"p"},"6650"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"pulsar://localhost:6650\n")),(0,r.kt)("p",null,"If you have multiple brokers, separate ",(0,r.kt)("inlineCode",{parentName:"p"},"IP:port")," by commas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"pulsar://localhost:6550,localhost:6651,localhost:6652\n")),(0,r.kt)("p",null,"If you use ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.11.x/security-tls-authentication"},"mTLS authentication"),", add ",(0,r.kt)("inlineCode",{parentName:"p"},"+ssl")," in the scheme:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"pulsar+ssl://pulsar.us-west.example.com:6651\n")),(0,r.kt)("h2",{id:"release-notes"},"Release notes"),(0,r.kt)("p",null,"For the changelog of Pulsar C# clients, see ",(0,r.kt)("a",{parentName:"p",href:"/release-notes/#c-1"},"release notes"),"."),(0,r.kt)("h2",{id:"client"},"Client"),(0,r.kt)("p",null,"This section describes some configuration examples for the Pulsar C# client."),(0,r.kt)("h3",{id:"create-client"},"Create client"),(0,r.kt)("p",null,"This example shows how to create a Pulsar C# client connected to localhost."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using DotPulsar;\n\nvar client = PulsarClient.Builder().Build();\n")),(0,r.kt)("p",null,"To create a Pulsar C# client by using the builder, you can specify the following options."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ServiceUrl"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the service URL for the Pulsar cluster."),(0,r.kt)("td",{parentName:"tr",align:null},"pulsar://localhost:6650")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RetryInterval"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the time to wait before retrying an operation or a reconnection."),(0,r.kt)("td",{parentName:"tr",align:null},"3s")))),(0,r.kt)("h3",{id:"create-producer"},"Create producer"),(0,r.kt)("p",null,"This section describes how to create a producer."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a producer by using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\nusing DotPulsar.Extensions;\n\nvar producer = client.NewProducer()\n                     .Topic("persistent://public/default/mytopic")\n                     .Create();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a producer without using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\n\nvar options = new ProducerOptions<byte[]>("persistent://public/default/mytopic", Schema.ByteArray);\nvar producer = client.CreateProducer(options);\n')))),(0,r.kt)("h3",{id:"create-consumer"},"Create consumer"),(0,r.kt)("p",null,"This section describes how to create a consumer."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a consumer by using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\nusing DotPulsar.Extensions;\n\nvar consumer = client.NewConsumer()\n                     .SubscriptionName("MySubscription")\n                     .Topic("persistent://public/default/mytopic")\n                     .Create();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a consumer without using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\n\nvar options = new ConsumerOptions<byte[]>("MySubscription", "persistent://public/default/mytopic", Schema.ByteArray);\nvar consumer = client.CreateConsumer(options);\n')))),(0,r.kt)("h3",{id:"create-reader"},"Create reader"),(0,r.kt)("p",null,"This section describes how to create a reader."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a reader by using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\nusing DotPulsar.Extensions;\n\nvar reader = client.NewReader()\n                   .StartMessageId(MessageId.Earliest)\n                   .Topic("persistent://public/default/mytopic")\n                   .Create();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a reader without using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using DotPulsar;\n\nvar options = new ReaderOptions<byte[]>(MessageId.Earliest, "persistent://public/default/mytopic", Schema.ByteArray);\nvar reader = client.CreateReader(options);\n')))),(0,r.kt)("h3",{id:"configure-encryption-policies"},"Configure encryption policies"),(0,r.kt)("p",null,"The Pulsar C# client supports four kinds of encryption policies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EnforceUnencrypted"),": always use unencrypted connections."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EnforceEncrypted"),": always use encrypted connections)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PreferUnencrypted"),": use unencrypted connections, if possible."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PreferEncrypted"),": use encrypted connections, if possible.")),(0,r.kt)("p",null,"This example shows how to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"EnforceUnencrypted")," encryption policy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using DotPulsar;\n\nvar client = PulsarClient.Builder()\n                         .ConnectionSecurity(EncryptionPolicy.EnforceEncrypted)\n                         .Build();\n")),(0,r.kt)("h3",{id:"configure-authentication"},"Configure authentication"),(0,r.kt)("p",null,"Currently, the Pulsar C# client supports the TLS (Transport Layer Security) and JWT (JSON Web Token) authentication."),(0,r.kt)("p",null,"If you have followed ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.11.x/security-tls-authentication"},"Authentication using mTLS"),", you get a certificate and a key. To use them from the Pulsar C# client, follow these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create an unencrypted and password-less pfx file."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"openssl pkcs12 -export -keypbe NONE -certpbe NONE -out admin.pfx -inkey admin.key.pem -in admin.cert.pem -passout pass:\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use the admin.pfx file to create an X509Certificate2 and pass it to the Pulsar C# client."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Security.Cryptography.X509Certificates;\nusing DotPulsar;\n\nvar clientCertificate = new X509Certificate2("admin.pfx");\nvar client = PulsarClient.Builder()\n                         .AuthenticateUsingClientCertificate(clientCertificate)\n                         .Build();\n')))),(0,r.kt)("h2",{id:"producer"},"Producer"),(0,r.kt)("p",null,"A producer is a process that attaches to a topic and publishes messages to a Pulsar broker for processing. This section describes some configuration examples of the producer."),(0,r.kt)("h3",{id:"send-data"},"Send data"),(0,r.kt)("p",null,"This example shows how to send data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var data = Encoding.UTF8.GetBytes("Hello World");\nawait producer.Send(data);\n')),(0,r.kt)("h3",{id:"send-messages-with-customized-metadata"},"Send messages with customized metadata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Send messages with customized metadata by using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var messageId = await producer.NewMessage()\n                              .Property("SomeKey", "SomeValue")\n                              .Send(data);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Send messages with customized metadata without using the builder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var data = Encoding.UTF8.GetBytes("Hello World");\nvar metadata = new MessageMetadata();\nmetadata["SomeKey"] = "SomeValue";\nvar messageId = await producer.Send(metadata, data));\n')))),(0,r.kt)("h2",{id:"consumer"},"Consumer"),(0,r.kt)("p",null,"A consumer is a process that attaches to a topic through a subscription and then receives messages. This section describes some configuration examples about the consumer."),(0,r.kt)("h3",{id:"receive-messages"},"Receive messages"),(0,r.kt)("p",null,"This example shows how a consumer receives messages from a topic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'await foreach (var message in consumer.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n')),(0,r.kt)("h3",{id:"acknowledge-messages"},"Acknowledge messages"),(0,r.kt)("p",null,"Messages can be acknowledged individually or cumulatively. For details about message acknowledgment, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.11.x/concepts-messaging#acknowledgment"},"acknowledgment"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Acknowledge messages individually."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"await consumer.Acknowledge(message);\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Acknowledge messages cumulatively."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"await consumer.AcknowledgeCumulative(message);\n")))),(0,r.kt)("h3",{id:"unsubscribe-from-topics"},"Unsubscribe from topics"),(0,r.kt)("p",null,"This example shows how a consumer unsubscribes from a topic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"await consumer.Unsubscribe();\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A consumer cannot be used and is disposed once the consumer unsubscribes from a topic.")),(0,r.kt)("h2",{id:"reader"},"Reader"),(0,r.kt)("p",null,"A reader is just a consumer without a cursor. This means that Pulsar does not keep track of your progress and there is no need to acknowledge messages."),(0,r.kt)("p",null,"This example shows how a reader receives messages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'await foreach (var message in reader.Messages())\n{\n    Console.WriteLine("Received: " + Encoding.UTF8.GetString(message.Data.ToArray()));\n}\n')),(0,r.kt)("h2",{id:"monitoring"},"Monitoring"),(0,r.kt)("p",null,"This section describes how to monitor the producer, consumer, and reader state."),(0,r.kt)("h3",{id:"monitor-producer"},"Monitor producer"),(0,r.kt)("p",null,"The following table lists states available for the producer."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"State"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Closed"),(0,r.kt)("td",{parentName:"tr",align:null},"The producer or the Pulsar client has been disposed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Connected"),(0,r.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,r.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,r.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PartiallyConnected"),(0,r.kt)("td",{parentName:"tr",align:null},"Some of the sub-producers are disconnected.")))),(0,r.kt)("p",null,"This example shows how to monitor the producer state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private static async ValueTask Monitor(IProducer producer, CancellationToken cancellationToken)\n{\n    var state = ProducerState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = (await producer.StateChangedFrom(state, cancellationToken)).ProducerState;\n\n        var stateMessage = state switch\n        {\n            ProducerState.Connected => $"The producer is connected",\n            ProducerState.Disconnected => $"The producer is disconnected",\n            ProducerState.Closed => $"The producer has closed",\n            ProducerState.Faulted => $"The producer has faulted",\n            ProducerState.PartiallyConnected => $"The producer is partially connected.",\n            _ => $"The producer has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (producer.IsFinalState(state))\n            return;\n    }\n}\n')),(0,r.kt)("h3",{id:"monitor-consumer-state"},"Monitor consumer state"),(0,r.kt)("p",null,"The following table lists states available for the consumer."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"State"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Active"),(0,r.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inactive"),(0,r.kt)("td",{parentName:"tr",align:null},"All is well. The subscription type is ",(0,r.kt)("inlineCode",{parentName:"td"},"Failover")," and you are not the active consumer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Closed"),(0,r.kt)("td",{parentName:"tr",align:null},"The consumer or the Pulsar client has been disposed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,r.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,r.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ReachedEndOfTopic"),(0,r.kt)("td",{parentName:"tr",align:null},"No more messages are delivered.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Unsubscribed"),(0,r.kt)("td",{parentName:"tr",align:null},"The consumer has unsubscribed.")))),(0,r.kt)("p",null,"This example shows how to monitor the consumer state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private static async ValueTask Monitor(IConsumer consumer, CancellationToken cancellationToken)\n{\n    var state = ConsumerState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = (await consumer.StateChangedFrom(state, cancellationToken)).ConsumerState;\n\n        var stateMessage = state switch\n        {\n            ConsumerState.Active => "The consumer is active",\n            ConsumerState.Inactive => "The consumer is inactive",\n            ConsumerState.Disconnected => "The consumer is disconnected",\n            ConsumerState.Closed => "The consumer has closed",\n            ConsumerState.ReachedEndOfTopic => "The consumer has reached end of topic",\n            ConsumerState.Faulted => "The consumer has faulted",\n            ConsumerState.Unsubscribed => "The consumer is unsubscribed.",\n            _ => $"The consumer has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (consumer.IsFinalState(state))\n            return;\n    }\n}\n')),(0,r.kt)("h3",{id:"monitor-reader-state"},"Monitor reader state"),(0,r.kt)("p",null,"The following table lists states available for the reader."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"State"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Closed"),(0,r.kt)("td",{parentName:"tr",align:null},"The reader or the Pulsar client has been disposed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Connected"),(0,r.kt)("td",{parentName:"tr",align:null},"All is well.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Disconnected"),(0,r.kt)("td",{parentName:"tr",align:null},"The connection is lost and attempts are being made to reconnect.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Faulted"),(0,r.kt)("td",{parentName:"tr",align:null},"An unrecoverable error has occurred.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ReachedEndOfTopic"),(0,r.kt)("td",{parentName:"tr",align:null},"No more messages are delivered.")))),(0,r.kt)("p",null,"This example shows how to monitor the reader's state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private static async ValueTask Monitor(IReader reader, CancellationToken cancellationToken)\n{\n    var state = ReaderState.Disconnected;\n\n    while (!cancellationToken.IsCancellationRequested)\n    {\n        state = (await reader.StateChangedFrom(state, cancellationToken)).ReaderState;\n\n        var stateMessage = state switch\n        {\n            ReaderState.Connected => "The reader is connected",\n            ReaderState.Disconnected => "The reader is disconnected",\n            ReaderState.Closed => "The reader has closed",\n            ReaderState.ReachedEndOfTopic => "The reader has reached end of topic",\n            ReaderState.Faulted => "The reader has faulted",\n            _ => $"The reader has an unknown state \'{state}\'"\n        };\n\n        Console.WriteLine(stateMessage);\n\n        if (reader.IsFinalState(state))\n            return;\n    }\n}\n')))}u.isMDXComponent=!0}}]);