"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=i,f=p["".concat(c,".").concat(d)]||p[d]||g[d]||r;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(87462),i=(n(67294),n(3905));const r={id:"functions-debug-log-topic",title:"Debug with log topic",sidebar_label:"Debug with log topic",description:"Learn to debug functions with log topic in Pulsar."},a=void 0,l={unversionedId:"functions-debug-log-topic",id:"functions-debug-log-topic",title:"Debug with log topic",description:"Learn to debug functions with log topic in Pulsar.",source:"@site/docs/functions-debug-log-topic.md",sourceDirName:".",slug:"/functions-debug-log-topic",permalink:"/docs/next/functions-debug-log-topic",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/docs/functions-debug-log-topic.md",tags:[],version:"current",frontMatter:{id:"functions-debug-log-topic",title:"Debug with log topic",sidebar_label:"Debug with log topic",description:"Learn to debug functions with log topic in Pulsar."},sidebar:"docsSidebar",previous:{title:"Debug with localrun mode",permalink:"/docs/next/functions-debug-localrun"},next:{title:"Debug with Functions CLI",permalink:"/docs/next/functions-debug-cli"}},c={},s=[],u={toc:s},p="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When using Pulsar Functions, you can generate logs predefined in functions to a specified log topic and configure consumers to consume messages from the log topic."),(0,i.kt)("p",null,"For example, the following function logs either a WARNING-level or INFO-level log based on whether the incoming string contains the word ",(0,i.kt)("inlineCode",{parentName:"p"},"danger")," or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.pulsar.functions.api.Context;\nimport org.apache.pulsar.functions.api.Function;\nimport org.slf4j.Logger;\n\npublic class LoggingFunction implements Function<String, Void> {\n    @Override\n    public void apply(String input, Context context) {\n        Logger LOG = context.getLogger();\n        String messageId = new String(context.getMessageId());\n\n        if (input.contains("danger")) {\n            LOG.warn("A warning was received in message {}", messageId);\n        } else {\n            LOG.info("Message {} received\\nContent: {}", messageId, input);\n        }\n\n        return null;\n    }\n}\n')),(0,i.kt)("p",null,"As shown in the example, you can get the logger via ",(0,i.kt)("inlineCode",{parentName:"p"},"context.getLogger()")," and assign the logger to the ",(0,i.kt)("inlineCode",{parentName:"p"},"LOG")," variable of ",(0,i.kt)("inlineCode",{parentName:"p"},"slf4j"),", so you can define your desired logs in a function using the ",(0,i.kt)("inlineCode",{parentName:"p"},"LOG")," variable."),(0,i.kt)("p",null,"Meanwhile, you need to specify the topic that the logs can be produced to. The following is an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bin/pulsar-admin functions create \\\n  --log-topic persistent://public/default/logging-function-logs \\\n  # Other function configs\n")),(0,i.kt)("p",null,"The message published to a log topic contains several properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loglevel"),": the level of the log message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fqn"),": the fully qualified function name that pushes this log message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"instance"),": the ID of the function instance that pushes this log message.")))}g.isMDXComponent=!0}}]);